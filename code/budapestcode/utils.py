"""Module containing utils"""
from numpy.polynomial.legendre import Legendre
import numpy as np


def compute_tsnr(data, conf):
    """Compute tSNR on data by first regressing out the first 10 compcor
    components and framewise displacement, as well as polynomial trends up to linear.

    Parameters
    ----------
    data : array of shape (dim1, dim2, dim3, n_volumes)
        EPI data
    conf : pandas Dataframe
        dataframe containing confounds generated by fmriprepp
    
    Returns
    ------
    tsnr : array of shape (dim1, dim2, dim3)
        temporal SNR array
    """
    # reshape
    data = data.T
    orig_shape = data.shape
    data = data.reshape(orig_shape[0], -1)
    # store mean
    data_mean = data.mean(0)
    # make predictor matrix
    # first add polynomial regressors -- code lifted from nipype
    poly_degree = 1
    n_samples = data.shape[0]
    X = np.ones((n_samples, 1))  # mean
    for d in range(poly_degree):
        poly = Legendre.basis(d + 1)
        poly_trend = poly(np.linspace(-1, 1, n_samples))
        X = np.hstack((X, poly_trend[:, None]))
    # then add compcor confounds and additional noise regressors
    confounds = [
        'framewise_displacement'
    ]
    n_comp_cor = 10
    confounds += [f"a_comp_cor_{c:02d}" for c in range(n_comp_cor)]
    X = np.hstack((X, conf[confounds].values))
    X = np.nan_to_num(X)
    # regress out noise
    coef, _, _, _ = la.lstsq(X, data)
    data_clean = data - X.dot(coef)
    # compute std
    std = data_clean.std(0)
    std[std < 1e-8] = 1
    tsnr = data_mean / std
    # reshape to the original shape
    tsnr = tsnr.reshape(orig_shape[1:]).T
    return tsnr
